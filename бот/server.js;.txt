import 'dotenv/config';
import express from 'express';
import axios from 'axios';
import { Telegraf, Markup } from 'telegraf';
import crypto from 'crypto';
import path from 'path';
import { fileURLToPath } from 'url';

const { BOT_TOKEN, PUBLIC_URL, PORT = 3000 } = process.env;
if (!BOT_TOKEN || !PUBLIC_URL) {
  console.error('Set BOT_TOKEN and PUBLIC_URL in .env');
  process.exit(1);
}

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// --- Telegraf bot ---
const bot = new Telegraf(BOT_TOKEN);

// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App
bot.start((ctx) => {
  return ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ–¥–∞—Ä–∫–æ–≤!',
    Markup.inlineKeyboard([
      Markup.button.webApp('–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', `${PUBLIC_URL}/webapp/`)
    ])
  );
});

// –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ -> –≤—ã–¥–∞—ë–º –ø–æ–¥–∞—Ä–æ–∫
bot.on('message', async (ctx) => {
  const msg = ctx.message;
  if (msg.successful_payment) {
    // –ü–æ–ª—É—á–∞–µ–º –≤–∞—à—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∑–∞–ø–∏—Å—å –∑–∞–∫–∞–∑–∞ –ø–æ payload (invoice_payload)
    const payload = msg.successful_payment.invoice_payload; // –≤–∞—à orderId
    const userId = msg.from.id;

    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ë–î; –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî in-memory map
      const order = orders.get(payload);
      if (!order  order.status !== 'pending'  order.userId !== userId) return;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Bot API 8.0+).
      // NB: —Ç–æ—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è sendGift –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–π SDK.
      // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–∑—ã–≤–∞–π—Ç–µ Bot API –Ω–∞–ø—Ä—è–º—É—é:
      // POST https://api.telegram.org/bot<BOT_TOKEN>/sendGift
      await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendGift`, {
        user_id: userId,
        gift_id: order.giftId
      });

      order.status = 'delivered';
      await ctx.reply('–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ‚ú®');
    } catch (e) {
      console.error('sendGift failed', e?.response?.data || e.message);
      await ctx.reply('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –≤—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /paysupport');
    }
  }
});

// (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) webhook
// await bot.telegram.setWebhook(`${PUBLIC_URL}/bot${bot.secretPathComponent()}`);
// app.use(bot.webhookCallback(`/bot${bot.secretPathComponent()}`));

// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî long polling –≤ dev:
bot.launch().then(() => console.log('Bot started (long polling)'));

// --- –ü—Å–µ–≤–¥–æ-–ë–î –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞) ---
const orders = new Map(); // key: orderId -> { userId, giftId, title, priceStars, status }

// --- –í–∞–ª–∏–¥–∞—Ü–∏—è initData –æ—Ç Mini App (HMAC-SHA256) ---
function validateInitData(initData, botToken) {
  // initData ‚Äì —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ query, –ø—Ä–∏—à–µ–¥—à–∞—è –∏–∑ Telegram.WebApp.initData
  const urlParams = new URLSearchParams(initData);
  const hash = urlParams.get('hash');
  urlParams.delete('hash');

  // –§–æ—Ä–º–∏—Ä—É–µ–º data_check_string
  const dataCheckArr = [];
  for (const [key, value] of urlParams.entries()) dataCheckArr.push(`${key}=${value}`);
  dataCheckArr.sort();
  const dataCheckString = dataCheckArr.join('\n');

  // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á = SHA256(botToken)
  const secretKey = crypto.createHash('sha256').update(botToken).digest();

  // HMAC_SHA256(data_check_string, secretKey)
  const hmac = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');

  return hmac === hash;
}

// --- API: –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ ---
app.get('/api/gifts', async (req, res) => {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ (Bot API 8.0+)
    // POST getAvailableGifts
    const { data } = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/getAvailableGifts`, {});
    if (data.ok) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥ —Ñ—Ä–æ–Ω—Ç
      const gifts = data.result.map(g => ({
        id: g.id,
        title: g.title  g.emoji  'Gift',
        // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –ø–æ–ª—è; –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ, —á—Ç–æ –≤–µ—Ä–Ω—ë—Ç –≤–∞—à –±–æ—Ç:
        priceStars: g.star_count  g.price_stars  100,
        photo: g.photo_url || null
      }));
      return res.json({ gifts });
    }
    throw new Error(JSON.stringify(data));
  } catch (e) {
    // –§–æ–ª–ª–±—ç–∫: —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä
    return res.json({
      gifts: [
        { id: 'g1', title: 'üéÅ Classic Gift', priceStars: 100 },

–¥–∏–º–∞, [19.08.2025 18:59]
{ id: 'g2', title: 'üí´ Super Gift',  priceStars: 300 },
        { id: 'g3', title: 'üî• Mega Gift',   priceStars: 700 }
      ]
    });
  }
});

// --- API: —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –≤ Stars –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ ---
app.post('/api/create-invoice', async (req, res) => {
  try {
    const { initData, giftId, title, priceStars } = req.body;

    if (!validateInitData(initData, BOT_TOKEN)) {
      return res.status(403).json({ error: 'Bad initData' });
    }

    // –ù–∞ –æ—Å–Ω–æ–≤–µ initData –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å user.id (—Ä–∞–∑–±–µ—Ä–∏—Ç–µ JSON –≤ initData)
    const user = JSON.parse(decodeURIComponent(new URLSearchParams(initData).get('user') || '{}'));
    const userId = user?.id;
    if (!userId) return res.status(400).json({ error: 'No user in initData' });

    // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    const orderId = order_${Date.now()}_${Math.random().toString(36).slice(2)};
    orders.set(orderId, {
      userId,
      giftId,
      title,
      priceStars,
      status: 'pending'
    });

    // –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å (XTR ‚Äî –≤–∞–ª—é—Ç–∞ Stars)
    const { data } = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/createInvoiceLink`, {
      title: title || 'Gift',
      description: –ü–æ–∫—É–ø–∫–∞: ${title},
      payload: orderId,                 // –ø–æ–ø–∞–¥—ë—Ç –≤ successful_payment.invoice_payload
      provider_token: '',               // –¥–ª—è Stars –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      currency: 'XTR',
      prices: [{ label: title, amount: Number(priceStars) }] // amount = –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥
    });

    if (!data.ok) throw new Error(JSON.stringify(data));
    return res.json({ invoiceLink: data.result });
  } catch (e) {
    console.error('create-invoice failed', e?.response?.data || e.message);
    res.status(500).json({ error: 'Failed to create invoice' });
  }
});

// --- –°—Ç–∞—Ç–∏–∫–∞ Mini App ---
const __dirname = path.dirname(fileURLToPath(import.meta.url));
app.use('/webapp', express.static(path.join(__dirname, 'public', 'webapp')));

// --- –¢–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
app.get('/terms', (req, res) => res.send('–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã, –≤–æ–∑–≤—Ä–∞—Ç—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Telegram Stars.'));
app.get('/paysupport', (req, res) => res.send('–ü–æ–¥–¥–µ—Ä–∂–∫–∞: –Ω–∞–ø–∏—à–∏—Ç–µ @your_support –∏–ª–∏ email support@example.com'));

app.listen(PORT, () => console.log(`HTTP on http://localhost:${PORT}`));
